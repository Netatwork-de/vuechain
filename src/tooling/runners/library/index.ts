import { join } from "path";
import { src, dest } from "vinyl-fs";
import chokidar = require("chokidar");
import gulpTs = require("gulp-typescript");
import sourcemaps = require("gulp-sourcemaps");
import colors = require("ansi-colors");
import { VcConfig } from "../../config";
import { VcRunnerContext } from "..";
import { formatTsError } from "./utility/ts";
import { Task, stream, streamSwitch, streamEnd } from "./utility/tasks";
import { decomposeVue, formatVueError } from "./vue/decompose";

export async function run(config: VcConfig, context: VcRunnerContext) {
	const tsProject = gulpTs.createProject(join(config.context, "tsconfig.json"));
	const scheduler = new Task(async () => {

		let errorCount = 0;
		await stream((end, error) => {
			const input = src("./**/*", { cwd: config.rootDir, allowEmpty: true, nosort: true }).pipe(sourcemaps.init());
			const output = sourcemaps.write().pipe(dest(config.outDir));

			const vue = decomposeVue({
				error(error) {
					errorCount++;
					console.error("\n" + formatVueError(error));
				}
				// TODO: What files are generated by the vue decomposer?
			});
			const ts = tsProject({
				error(error) {
					const str = formatTsError(error);
					if (str) {
						errorCount++;
						console.error("\n" + formatTsError(error));
					}
				}
			}).on("error", () => { });

			ts.pipe(output);
			vue.pipe(streamSwitch([
				{ match: /\.ts$/, stream: ts },
				{ stream: output }
			]));
			input.pipe(streamSwitch([
				{ match: /\.ts$/, stream: ts },
				{ match: /\.vue$/, stream: vue },
				{ stream: output }
			]));

			// TODO: Apply vue decomposition transforms:
			// - Rewrite declaration file paths.
			// - Add scope transform to css files.

			streamEnd([input, vue], () => ts.end());
			streamEnd([input], () => vue.end());
			streamEnd([input, ts, vue], () => output.end());
			streamEnd([output], end);
		});

		if (errorCount > 0) {
			console.log(colors.redBright(`\n[${new Date().toLocaleTimeString()}] Compilation finished with ${errorCount} error(s).`));
		} else {
			console.log(colors.greenBright(`\n[${new Date().toLocaleTimeString()}] Compilation succeeded.`));
		}
		if (context.watch) {
			console.log(colors.gray("Watching for changes..."));
		} else if (errorCount > 0) {
			throw new Error("Build failed due to compilation errors.");
		}
	});

	if (context.watch) {
		console.clear();
		await scheduler.run();
		const watcher = chokidar.watch("./**/*", { cwd: config.rootDir, ignoreInitial: true });
		watcher.on("error", console.error);
		watcher.on("change", () => {
			console.clear();
			console.log(colors.gray("File change detected. Starting incremental compilation..."));
			scheduler.run();
		});
		await new Promise(() => { });
	} else {
		await scheduler.run();
	}
}
